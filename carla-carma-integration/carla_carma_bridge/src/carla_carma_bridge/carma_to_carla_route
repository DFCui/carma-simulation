#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
"""
Call Services from CARMA: 
    Service: /guidance/get_available_routes
             /guidance/set_active_route

Publish to CARMA :cav_msgs::Route
    
"""
from asyncio.windows_events import NULL
import rospy
from geometry_msgs.msg import PoseStamped
from cav_msgs.msg import RouteState
from cav_msgs.msg import Route
from cav_msgs.msg import RouteEvent
from cav_srvs.srv import GetAvailableRoutes
from cav_srvs.srv import SetActiveRoute


localized_sub = rospy.Subscriber('/localization/current_pose', PoseStamped)
selected_route = Route()

class ErrorStatus:
    def __init__(self, value, text):
        self.value = value
        self.text = text


def get_available_routes():
    service = rospy.ServiceProxy('/guidance/get_available_routes', GetAvailableRoutes)
    #Make sure that the vehicle is localized
    if localized_sub: 
        try:
            resp = service.call(0)
            available_routes = GetAvailableRoutes()
            available_routes.availableRoutes = resp.availableRoutes

        except:
            print("Invalid: /guidance/get_available_routes failed.")
        else:
            print("Available Routes acquired")
            return available_routes.availableRoutes
    else:
        print("Localization Incomplete")
        return



def set_route(id, route_name):
    service = rospy.ServiceProxy('/guidance/set_active_route', SetActiveRoute)
    
    NO_ERROR = ErrorStatus(0, "NO_ERROR")
    NO_ROUTE = ErrorStatus(1, "NO_ROUTE")
    ALREADY_FOLLOWING_ROUTE = ErrorStatus(2, "ALREADY_FOLLOWING_ROUTE")
    ROUTE_FILE_ERROR = ErrorStatus(3, "ROUTE_FILE_ERROR")
    ROUTING_FAILURE = ErrorStatus(4, "ROUTING_FAILURE")
    TRANSFORM_ERROR = ErrorStatus(5, "TRANSFORM_ERROR")

    try:
        #Service Call Request
        resp = service(0, id)
        if resp.errorStatus != NO_ERROR.value:
            errorDescription = ""
            if resp.errorStatus == NO_ROUTE.value:
                errorDescription = NO_ROUTE.text

            elif resp.errorStatus == ALREADY_FOLLOWING_ROUTE.value:
                errorDescription = ALREADY_FOLLOWING_ROUTE.text

            elif resp.errorStatus == ROUTE_FILE_ERROR.value:
                errorDescription = ROUTE_FILE_ERROR.text

            elif resp.errorStatus == ROUTING_FAILURE.value:
                errorDescription = ROUTING_FAILURE.text

            elif resp.errorStatus == TRANSFORM_ERROR.value:
                errorDescription = TRANSFORM_ERROR.text
        
            else:
                errorDescription = resp.errorStatus

        else:
                #Call succeeded: Setting Route
                print('call set active route success!')
                selected_route.route_id = resp.routeID
                selected_route.route_name = resp.routeName
    


    except:
            print("Fail")
    
    #RouteEvent
    route_event_sub = rospy.Subscriber('/guidance/route_event', RouteEvent,route_event_callback)


def route_event_callback(event):
    route_event = RouteEvent()
    route_event.event = event
    if route_event.event == 6:
        print("ROUTE_GEN_FAILED")
    

def initialize():
    available_routes = get_available_routes()
    route = available_routes.availableRoutes[0]
    set_route(route.route_id, route.route_name)
    rospy.spin()


if __name__ == '__main__':
    print("")
    initialize()

    


