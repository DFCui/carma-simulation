#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
#
# This file is loosely based on the reference architecture developed by Intel Corporation for Leidos located here
# https://github.com/usdot-fhwa-stol/carma-platform/blob/develop/health_monitor/src/plugin_manager.cpp
#
# That file has the following license and some code snippets from it may be present in this file as well and are under the same license.
#
# Copyright (c) 2018-2019 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#

from pickle import FALSE, TRUE
import rospy
from cav_msgs.msg import Plugin, PluginList, PluginStatus
from cav_srvs.srv import GetRegisteredPlugins


plugin_pub = rospy.Publisher('/guidance/plugin_discovery', Plugin())
required_plugins = rospy.get_param('required_plugins')
plugin_list = PluginList()

def get_registered_plugins(resp):
    """ Service to get registered plugins"""

    plugins = plugin_list.plugins
    plugin = Plugin()

    #If the plugins are listed as AVAILABLE, make sure that they are both active and running
    for x in plugins:
            plugin.available == x.available
            plugin.activated = x.activated
            plugin.name = x.name
            plugin.capability = x.capability
            plugin.versionId = x.versionID
            plugin.type = x.type
            plugin.activated = TRUE
    resp.plugins.append(plugin)
        #Publish the now active plugin message to /guidance/plugin_discovery
        #plugin_pub.publish(plugin)
        

#Check if the plugin is included in the list of required plugins
def check_required_plugins(name):
    for i in required_plugins:
        if i == name:
            return TRUE
        else:
            return FALSE

def update_plugin_status(plugin_msg):
    print("Received status from: " ++ plugin_msg.name)
    requested_name = get_plugin_name(plugin_msg.name)
    plugin = Plugin()
    plugin.available = plugin_msg.available
    plugin.name = plugin_msg.name
    plugin.capability = plugin_msg.capability
    plugin.type = plugin_msg.type

    #If the requested plugin exists, don't change the activation status
    if requested_name != FALSE:
        plugin.activated = plugin_msg.activated
    elif check_required_plugins(plugin_msg.name) == TRUE:
        plugin.activated = TRUE

    plugin_list.plugins.append(plugin)


def get_plugin_name(name):
    for i in required_plugins:
        if i == name:
            return i
        else:
            return FALSE

def initialize():
    plugin_sub = rospy.Subscriber('plugin/plugin_discovery',Plugin(), update_plugin_status)
    #registered_plugins_serv = rospy.ServiceProxy('carla/get_registered_plugins',get_registered_plugins)
    registered_plugins_serv = rospy.Service('carla/get_registered_plugins',GetRegisteredPlugins,get_registered_plugins)
    rospy.spin()


if __name__ == '__main__':
    print("carma_to_carla_plugins")
    initialize()