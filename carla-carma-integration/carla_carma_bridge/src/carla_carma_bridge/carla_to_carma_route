#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
#
# This file is loosely based on the reference architecture developed by Intel Corporation for Leidos located here
# https://github.com/41623134/carla-autoware/blob/master/catkin_ws/src/carla_autoware_bridge/src/carla_autoware_bridge/odometry_to_posestamped
#
# That file has the following license and some code snippets from it may be present in this file as well and are under the same license.
#
# Copyright (c) 2018-2019 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
"""
Subscribe from CARMA:geometry_msgs::PoseStamped
    Topic: /localization/gnss_pose;
           /localization/current_pose

Subscribe from CARMA: 
    Service: /guidance/get_available_routes

Publish to CARMA :cav_msgs::Route
    
"""
from hashlib import new
import rospy
from geometry_msgs.msg import PoseStamped
from cav_msgs.msg import RouteState
from cav_srvs.srv import GetAvailableRoutes


route_state_pub = rospy.Publisher('/guidance/route_state', RouteState, queue_size=1)
#available_routes_serv = rospy.ServiceProxy('/guidance/get_available_routes', GetAvailableRoutes)

def available_routes_callback(available_routes):
    try:
        available_routes_serv = rospy.ServiceProxy('/guidance/get_available_routes', GetAvailableRoutes)
    except rospy.ServiceException as exc:
        print("Service did not process request: /guidance/get_available_routes ")





#def route_state_callback(state):
