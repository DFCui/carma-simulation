#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
#
# This file is loosely based on the reference architecture developed by Intel Corporation for Leidos located here
# https://github.com/41623134/carla-autoware/blob/master/catkin_ws/src/carla_autoware_bridge/src/carla_autoware_bridge/odometry_to_posestamped
#
# That file has the following license and some code snippets from it may be present in this file as well and are under the same license.
#
# Copyright (c) 2018-2019 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#

from pickle import TRUE
import rospy
from cav_msgs.msg import Plugin, PluginList, PluginStatus
from cav_srvs.srv import GetRegisteredPlugins

plugin_pub = rospy.Publisher('/guidance/plugin_discovery', Plugin())

def get_guidance_plugins():
    """Call Service to get registered plugins"""

    serv = rospy.ServiceProxy('guidance/get_registered_plugins', PluginList)
    plugins = serv.call()
    plugin = Plugin()
    
    #If the plugins are listed as AVAILABLE, make sure that they are both active and running
    for x in plugins:
        if x.available == TRUE:
            plugin.activated = TRUE
            plugin.name = x.name
            plugin.capability = x.capability
            plugin.versionId = x.versionID
            plugin.type = x.type
        #Publish the now active plugin message to /guidance/plugin_discovery
        plugin_pub.publish(plugin)

def initialize():
    get_guidance_plugins()
    rospy.spin()


if __name__ == '__main__':
    print("carma_to_carla_plugins")
    initialize()