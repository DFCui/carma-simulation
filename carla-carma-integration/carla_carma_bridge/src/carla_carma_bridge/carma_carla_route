#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
"""
Call Services from CARMA: 
    Service: /guidance/get_available_routes
             /guidance/set_active_route

Publish to CARMA :cav_msgs::Route
    
"""

import rospy
from geometry_msgs.msg import PoseStamped, Pose
from cav_msgs.msg import RouteState
from cav_msgs.msg import Route
from cav_msgs.msg import RouteEvent
from cav_srvs.srv import GetAvailableRoutes
from cav_srvs.srv import SetActiveRoute

selected_route = rospy.get_param('selected_route')
local_pos = PoseStamped()

class ErrorStatus:
    def __init__(self, value, text):
        self.value = value
        self.text = text
        
NO_ERROR = ErrorStatus(0, "NO_ERROR")
NO_ROUTE = ErrorStatus(1, "NO_ROUTE")
ALREADY_FOLLOWING_ROUTE = ErrorStatus(2, "ALREADY_FOLLOWING_ROUTE")
ROUTE_FILE_ERROR = ErrorStatus(3, "ROUTE_FILE_ERROR")
ROUTING_FAILURE = ErrorStatus(4, "ROUTING_FAILURE")
TRANSFORM_ERROR = ErrorStatus(5, "TRANSFORM_ERROR")

#Get the routes to be set after localization
def get_available_routes():
    service = rospy.ServiceProxy('/get_available_routes', GetAvailableRoutes)     
    try:
        resp = service.call(0)
        available_routes = GetAvailableRoutes()
        available_routes.availableRoutes = resp.availableRoutes

    except:
        print("Invalid: /guidance/get_available_routes failed.")
    else:
        print("Available Routes acquired")
        return available_routes.availableRoutes



def set_route(id):
    service = rospy.ServiceProxy('/set_active_route', SetActiveRoute)

    try:
        #Service Call Request
        resp = service(0, id)
        if resp.errorStatus != NO_ERROR.value:
            errorDescription = ""
            if resp.errorStatus == NO_ROUTE.value:
                errorDescription = NO_ROUTE.text

            elif resp.errorStatus == ALREADY_FOLLOWING_ROUTE.value:
                errorDescription = ALREADY_FOLLOWING_ROUTE.text

            elif resp.errorStatus == ROUTE_FILE_ERROR.value:
                errorDescription = ROUTE_FILE_ERROR.text

            elif resp.errorStatus == ROUTING_FAILURE.value:
                errorDescription = ROUTING_FAILURE.text

            elif resp.errorStatus == TRANSFORM_ERROR.value:
                errorDescription = TRANSFORM_ERROR.text
        
            else:
                errorDescription = resp.errorStatus
                
            print(errorDescription)

        else:
                #Call succeeded: Setting Route
                print('call set active route success!')
                   


    except:
            print("Fail")
    
def pose_cb(pose_msg):
    global local_pos
    local_pos.header = pose_msg.pose
    local_pos.pose = pose_msg.pose


def route_event_callback(event):
    route_event = RouteEvent()
    route_event.event = event
    if route_event.event == 6:
        print("ROUTE_GEN_FAILED")
        
def check_selected_route(available_routes):
    if selected_route in available_routes:
        return selected_route

def initialize():
    rospy.init_node("carma_carla_route")
    route_event_sub = rospy.Subscriber('/guidance/route_event', RouteEvent,route_event_callback)
    available_routes = get_available_routes()
    
    #Ensure that localization is complete before checking route information
    localized_sub = rospy.Subscriber('/localization/current_pose', PoseStamped, pose_cb)
    while rospy.is_shutdown() != True:  
        if local_pos.pose.position.x != 0 and local_pos.pose.position.y != 0:
            if available_routes == None:
                print("No routes available.")
            else:
                """Check if the selected route is one of the available routes. If it isn't,then print error statement"""
                if check_selected_route(available_routes) == True:
                    route = selected_route
                    set_route(route.route_id)
                    break

                else:
                    print("Error: Invalid selected route")
                    rospy.spin()
                
            
        else:
            print("Localization Incomplete")
            rospy.spin()


if __name__ == '__main__':
    print("carma_carla_route")
    initialize()

    


